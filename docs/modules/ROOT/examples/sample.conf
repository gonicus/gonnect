#[logging]
## console loglevel - use 6 for verbose output
## default: 1
#level=6


#[generic]
## Request autostart after user login via DBus.
## default: false
#autostart=false

## If set, a prepending "00" of a phone number will be replaced with this prefix when searching for contacts.
## So if a client is used in Germany, a "+49" can be set to treat a phone number like "0012345" as "+4912345".
## default: ""
#nationalPrefix=+49

## If set, a prepending "0" of a phone number will be replaced with this prefix when searching for contacts.
## So if a client is used in Cologne, a "+49221" can be set to treat a phone number like "012345" as "+4922112345".
## default: ""
#regionalPrefix=+492932

## If set, this regular expression tests a SIP url for being an anonymous participant. Such are displayed slightly different
## where a caller's name is displayed, e.g. in the history.
## default: ""
#anonymousRegex="^.*sip:anonymous@.*$"

## The GOnnect main window can show up on startup per default or start minimized.
## default: false
#showCallWindowOnStartup=false

## signal 486 Busy here when already on an active call
## default: false
#busyOnBusy=true

## Optional comma separated list of paths to files containing CA certificates. These will be used for various network communication, such
## as Jitsi authentication. Some parts (like LDAP or SIP accounts) might have separate options for CA files due to their specific API setup.
#caFiles=/path/to/CA.crt,/another/path/to/CA_2.crt

## If several preferred identities are configured (see below), this defines which one shall be used by default or how it shall be determined.
## The possible values are:
## "default": Do nothing, i.e. the identity is not changed by the client at all
## "auto": Select the identity by matching their "prefix" configuration string
## "preferred_identity_1": Use a specific identity as it is defined in the config
## default: "auto"
#preferredIdentity=auto

## Use special alerting when displayname of the caller matches this regex
## default: ""
#emergencyRegex=^.*EMERGENCY.*$


## see https://docs.pjsip.org/en/latest/api/generated/pjsip/group/group__PJSUA2__UA.html for further details/context.
#[ua]
## This specifies if the library should try to do an IPv6 resolution of the STUN servers if the IPv4 resolution fails.
## It can be useful in an IPv6-only environment, including on NAT64.
## default: false
#stunTryIpv6=false

## This specifies if the library startup should ignore failure with the STUN servers.
## If this is set to PJ_FALSE, the library will refuse to start if it fails to resolve or contact any of the STUN servers.
## default: false
#stunIgnoreFailure=false

## Handle unsolicited NOTIFY requests containing message waiting indication (MWI) info.
## Unsolicited MWI is incoming NOTIFY requests which are not requested by client with SUBSCRIBE request.
## If this is enabled, the library will respond 200/OK to the NOTIFY request and forward the request to Endpoint::onMwiInfo() callback.
## Note: the callback will not be invoked and 481/”No account to handle” response will be sent if this is enabled but no account is configured.
## See also AccountMwiConfig.enabled.
## default: true
#mwiUnsolicitedEnabled=true

## Specify whether to enable UPnP.
## Note that this setting can be further customized in account configuration (pjsua_acc_config).
## default: false
#enableUpnp=false

## Specify which interface to use for UPnP. If empty, UPnP will use the first suitable interface found.
## Note that this setting is only applicable if UPnP is enabled.
## default: ""
#upnpIfName=

## Maximum calls to support. The value specified here must be smaller than the compile time maximum settings PJSUA_MAX_CALLS, which by default is 32.
## To increase this limit, the library must be recompiled with new PJSUA_MAX_CALLS value.
## default: 4
#maxCalls=4

## Support for adding and parsing NAT type in the SDP to assist troubleshooting. The valid values are:
## 0: no information will be added in SDP, and parsing is disabled.
## 1: only the NAT type number is added.
## 2: add both NAT type number and name.
## default: 1
#natTypeInSdp=1

## Specify the URL of outbound proxies to visit for all outgoing requests.
## The outbound proxies will be used for all accounts, and it will be used to build the route set for outgoing requests.
## The final route set for outgoing requests will consists of the outbound proxies and the proxy configured in the account.
## default: ""
#outboundProxies=xxx,yyy,zzz

## Array of STUN servers to try. The library will try to resolve and contact each of the STUN server entry until it finds one that is usable.
## Each entry may be a domain name, host name, IP address, and it may contain an optional port number. For example:
## ”pjsip.org” (domain name)
## ”sip.pjsip.org” (host name)
## ”pjsip.org:33478” (domain name and a non-standard port number)
## ”10.0.0.1:3478” (IP address and port number)
## When nameserver is configured in the pjsua_config.nameserver field, if entry is not an IP address,
## it will be resolved with DNS SRV resolution first, and it will fallback to use DNS A resolution if this fails.
## Port number may be specified even if the entry is a domain name, in case the DNS SRV resolution should fallback to a non-standard port.
## When nameserver is not configured, entries will be resolved with pj_gethostbyname() if it’s not an IP address.
## Port number may be specified if the server is not listening in standard STUN port.
## default: ""
#stunServers=xxx,yyy,zzz

## Array of nameservers to be used by the SIP resolver subsystem.
## The order of the name server specifies the priority (first name server will be used first, unless it is not reachable).
## default: ""
#nameservers=xxx,yyy,zzz


#[media]
## Disable VAD (Voice Activity Detector)
## default: false
#noVad=false

## Use a software clock to synchronize media streaming. May lead to better latency.
#softwareClock=true

## Clock rate to be applied to the conference bridge. If value is zero, default clock rate will be used (PJSUA_DEFAULT_CLOCK_RATE, which by default is 16KHz).
## default: 16000
#clockRate=16000

## Clock rate to be applied when opening the sound device. If value is zero, conference bridge clock rate will be used.
## default: 16000
#sndClockRate=

## Audio capture buffer length, in milliseconds. Default: PJMEDIA_SND_DEFAULT_REC_LATENCY
## default: 100
#sndRecLatency=100

## Audio capture buffer length, in milliseconds. Default: PJMEDIA_SND_DEFAULT_REC_LATENCY
## default: 140 (160 for Windows Mobile)
#sndPlayLatency=160

## Media quality, 0-10, according to this table: 5-10: resampling use large filter, 3-4: resampling use small filter, 1-2: resampling use linear.
## The media quality also sets speex codec quality/complexity to the number. Default: PJSUA_DEFAULT_CODEC_QUALITY.
## default: 4
#quality=4

## Specify audio frame ptime. The value here will affect the samples per frame of both the sound device and the conference bridge.
## Specifying lower ptime will normally reduce the latency. Default value: PJSUA_DEFAULT_AUDIO_FRAME_PTIME
## default: 20
#audioFramePtime=20

## Jitter buffer initial prefetch delay in msec. The value must be between jb_min_pre and jb_max_pre below. If the value is 0, prefetching will be disabled.
## default: -1 (to use default stream settings, currently 0)
#jbInit=-1

## Jitter buffer minimum prefetch delay in msec.
## default: -1 (to use default stream settings, currently codec ptime)
#jbMinPre=-1

## Jitter buffer maximum prefetch delay in msec.
## default: -1 (to use default stream settings, currently 80% of jbMax)
#jbMaxPre=-1

## Set maximum delay that can be accomodated by the jitter buffer msec.
# default: -1 (to use default stream settings, currently 500 msec)
#jbMax=-1

## Echo canceller tail length, in miliseconds. Setting this to zero will disable echo cancellation. Default: PJSUA_DEFAULT_EC_TAIL_LEN
## default: 200
#ecTailLen=200


## see https://docs.pjsip.org/en/latest/api/generated/pjsip/group/group__PJSUA2__ACC.html for further details/context.
#[account0]
## The Address of Record or AOR, that is full SIP URL that identifies the account.
## The value can take name address or URL format, and will look something like “sip:account@serviceprovider”.
## default: ""
## This field is mandatory.
#userUri=sip:user@example.org

## This is the URL to be put in the request URI for the registration, and will look something like “sip:serviceprovider”.
## This field should be specified if registration is desired. If the value is empty, no account registration will be performed.
## default: ""
#registrarUri=sip:example.org

## Array of proxy servers to visit for outgoing requests. Each of the entry is translated into one Route URI.
## default: ""
#proxies=sip:proxy.example.org:5061;transport=tls;hide

## Specify whether secure media transport should be used for this account.
## Valid values are disabled, optional and mandatory
## default: ""
## This field is mandatory.
#srtpUse=mandatory

## Specify whether SRTP requires secure signaling to be used. This option is only used when use_srtp option above is non-zero.
## Valid values are: 0: SRTP does not require secure signaling 1: SRTP requires secure transport such as TLS 2: SRTP requires secure end-to-end transport (SIPS)
## default: ""
## This field is mandatory.
#srtpSecureSignaling=0

## If remote sends SDP answer containing more than one format or codec in the media line, send re-INVITE or UPDATE with just one codec to lock which codec to use.
## default: false
#lockCodecEnabled=false

## UDP port number for RTP media to bind locally.
## If the value is zero, the transport will be bound to any available port, and application can query the port by querying the transport info.
## default: 4000
#rtpPort=4000

## Specify the RTP port range for socket binding, relative to the start port number specified in port.
## Note that this setting is only applicable to media transport when the start port number is non zero. The port range needs to be a multiple
## of 2, because we've alternating
## Media transport is configurable via account setting, i.e: pjsua_acc_config.rtp_cfg, please check the media transport config docs for more info.
## Available ports are in the range of [rtpPort, rtpPort + rtpPortRange].
## default: 0
#rtpPortRange=0

## Specify whether to randomly pick the starting port number from  the range of [\a port, \a port + \a port_range]. This setting is
## used only if both rtpPort and rtpPortRange are non-zero, and only
## default: false
#randomizeRtpPort=false

## UDP port number to bind locally. This setting MUST be specified even when default port is desired.
## If the value is zero, the transport will be bound to any available port, and application can query the port by querying the transport info.
## default: 5061
#port=5061

## Specify the port range for socket binding, relative to the start port number specified in port.
## Note that this setting is only applicable to media transport when the start port number is non zero.
## Media transport is configurable via account setting, i.e: pjsua_acc_config.rtp_cfg, please check the media transport config docs for more info.
## Available ports are in the range of [port, port + port_range].
## default: 0
#portRange=0

## Certificate of Authority (CA) list file.
## default: ""
#caListFile=/home/user/.cert/ca.crt

## Public endpoint certificate file, which will be used as client- side certificate for outgoing TLS connection, and server-side certificate for incoming TLS connection.
## default: ""
#certFile=/home/user/.cert/default-combined.pem

## Optional private key of the endpoint certificate to be used.
## default: ""
#privateKeyFile=/home/user/.cert/default-combined.pem

## Specifies TLS transport behavior on the server TLS certificate verification result:
## If verifyServer is disabled, TLS transport will just notify the application via pjsip_tp_state_callback with state PJSIP_TP_STATE_CONNECTED regardless TLS verification result.
## If verifyServer is enabled, TLS transport will be shutdown and application will be notified with state PJSIP_TP_STATE_DISCONNECTED whenever there is any TLS verification error, otherwise PJSIP_TP_STATE_CONNECTED will be notified.
## In any cases, application can inspect pjsip_tls_state_info in the callback to see the verification detail.
## default: false
#verifyServer=false

## This option is used to update the transport address and the Contact header of REGISTER request.
## When this option is enabled, the library will keep track of the public IP address from the response of REGISTER request.
## Once it detects that the address has changed, it will unregister current Contact, update the Contact with transport address learned from Via header,
## and register a new Contact to the registrar. This will also update the public name of UDP transport if STUN is configured.
## Possible values:
## 0 (disabled).
## 1 (enabled). Update except if both Contact and server’s IP address are public but response contains private IP.
## 2 (enabled). Update without exception.
## See also contactRewriteMethod field.
## default: 0
#contactRewriteUse=0

## Specify how Contact update will be done with the registration, if contactRewriteEnabled is enabled.
## The value is bitmask combination of pjsua_contact_rewrite_method. See also pjsua_contact_rewrite_method.
## Possbiel values:
## "always-update"
## "no-unreg"
## default: always-update
## This field is mandatory.
#contactRewriteMethod=always-update # always-update / no-unreg

## Specify if source TCP port should be used as the initial Contact address if TCP/TLS transport is used.
## Note that this feature will be automatically turned off when nameserver is configured because it may yield different destination address due to DNS SRV resolution.
## Also some platforms are unable to report the local address of the TCP socket when it is still connecting. In these cases, this feature will also be turned off.
## default: true
#contactUseSrcPort=true

## Control the use of STUN for the SIP signaling.
## default: true
#sipStunUse=false

## Control the use of STUN for the media transports.
## default: false
#mediaStunUse=false

## Control the use of UPnP for the SIP signaling.
## default: false
#sipUpnpUse=true

## Specify NAT64 options.
## default: false
#nat64Opt=false

## Enable ICE for the media transport.
## default: false
#iceEnabled=false

## Specify whether to use aggressive nomination.
## default: true
#iceAggressiveNomination=true

## Disable RTCP component.
## default: false
#iceNoRtcp=false

## Always send re-INVITE/UPDATE after ICE negotiation regardless of whether the default ICE transport address is changed or not.
## When this is set to False, re-INVITE/UPDATE will be sent only when the default ICE transport address is changed.
## default: true
#iceAlwaysUpdate=true

## This option is used to overwrite the “sent-by” field of the Via header for outgoing messages with the same interface address as the one in the REGISTER request,
## as long as the request uses the same transport instance as the previous REGISTER request. 
## default: true
#viaRewriteUse=true

## This option controls whether the IP address in SDP should be replaced with the IP address found in Via header of the REGISTER response, ONLY when STUN and ICE are not used.
## If the value is FALSE (the original behavior), then the local IP address will be used. If TRUE, and when STUN and ICE are disabled,
## then the IP address found in registration response will be used.
## default: false
#sdpNatRewriteUse=false

## Control the use of SIP outbound feature. SIP outbound is described in RFC 5626 to enable proxies or registrar to send inbound requests back to UA
## using the same connection initiated by the UA for its registration. This feature is highly useful in NAT-ed deployemtns, hence it is enabled by default.
## Note: currently SIP outbound can only be used with TCP and TLS transports.
## If UDP is used for the registration, the SIP outbound feature will be silently ignored for the account.
## default: true
#sipOutboundUse=true

## Specify SIP outbound (RFC 5626) instance ID to be used by this account. If empty, an instance ID will be generated based on the hostname of this agent.
## If application specifies this parameter, the value will look like “<urn:uuid:00000000-0000-1000-8000-AABBCCDDEEFF>” without the double-quotes.
## default: ""
#sipOutboundInstanceId=

## Specify SIP outbound (RFC 5626) registration ID. The default value is empty, which would cause the library to automatically generate a suitable value.
## default: ""
#sipOutboundRegId=

## Points to the name of the desired auth section in the configuration - if any.
#auth=auth0

## Configures the SIP transport.
## Possible values: "tcp", "udp", "tls"
## default: "tls"
#transport=tls

## Configures the IP version type that should be used.
## The value "auto" lets the application try to determine the best one by itself. Setting a specific IP version enforces it.
## Possible values: "auto", "ipv4", "ipv6"
## default: "auto"
#network=auto

## When a call to another SIP client is established, _GOnnect_ automatically tries to negotiate capabilities per instant messaging with its counterpart, like the possibility
## to upgrade the call to a Jitsi Meet session. However, some pbx setups disallow SIP messaging and on complex setups, it might be impossible for _GOnnect_ to check reliably
## whether it is allowed or not. This flag can be used to disable the capability negotiation completely.
## default: true
#negotiateCapabilities=true


#[auth0]
## The authentication scheme (e.g. “digest”).
## default: Digest
#scheme=Digest

## Authentication user name
## default: ""
#username=user

## Realm on which this credential is to be used. Use “*” to make a credential that can be used to authenticate against any challenges.
## default: *
#realm=*

## Type of data that is contained in the “data” field. Use 0 if the data contains plain text password.
## default: plain
#type=plain

## The data, which can be a plain text password or a hashed digest.
## default: ""
#data=secret


#[audio]
## Path to ringtone soundfile - format needs to be supported by Qt Multimedia
#ringtone=path_to_some_file.mp3

## Volume for ringtone
## default: 90
#ringtoneVolume=42


## Preferred identities can be used to change how the client will be received at the callee.
## For example, when calling a specific customer (with a given prefix), the callee receives not the actual phone number of the
## caller, but another one, e.g. from a support hotline.
## Which identity should be used as default, resp. how it should be determined is set via the option "preferredIdentity" in the general section of this file (see above).
## These identities can be via the UI or here (e.g. for provisioning).
## Example (all fields are mandatory unless specified as optional):

## Each identity is a section, starting with "preferred_identity_" and followed by one or more digits.
#[preferred_identity_0]

## Whether the identity is enabled. If it is not, it cannot be selected neither manually nor automatically.
#enabled=true

## Whether the identity is respected when the option "preferredIdentity" is set to "auto", i.e. if set to false, this identity can only be selected manually.
#automatic=true

## A display name that is shown in the UI
#name=Send number

## The phone number, that the callee shall receive when using this identity.
#identity=+4929339114711

## The prefix to test against when this identity is considered for the "auto" mode of the option "preferredIdentity".
## When the called phone number (on outgoing calls) starts with this prefix, this identity will be chosen automatically.
## Multiple prefixes can be set when comma-separated.
## This is only used when "automatic" is set to true.
## (optional)
#prefix=+492913641,+49123


## This section defines how different dial tones are produced by the ring tone generator.
## There is rarely a need to change them, but it is possible in order to suit regional practices.
##
## The format follows this structure:
## frequency1, frequency2, [ interval1, interval2 ]+, loopIndex
##
## frequency1 and frequency2 defines two frequencies in Hz, with 0 meaning "off".  
## Then, one or more tuples of intervals (in ms) follow, each describing how long frequency1 (first value) and frequency2 (second value) shall be played.
## Finally, the last value (loopIndex) indicates from which tuple index it shall loop. A loopIndex of "0" means that nothing is repeated.
##
## Example: 
## 425,0,200,200,200,1000,200,200,200,1000,200,200,200,5000,4
## 
## will play the frequency 425 Hz followed by a pause (0 Hz) with these intervals:
##
## +---+-----------------+-----------------+
## | i | frequency1 [ms] | freuqency2 [ms] |
## +---+-----------------+-----------------+
## | 0 |             200 |             200 |
## | 1 |             200 |            1000 |
## | 2 |             200 |             200 |
## | 3 |             200 |            1000 |
## | 4 |             200 |             200 |
## | 5 |             200 |            5000 |
## +---+-----------------+-----------------+
##
## When finished, it will infinitely play lines 4 and 5 again (loopIndex = 4).
##
##
## default:
#[dialtones]
#ring="425,0,1000,4000,0"
#busy="425,0,480,480,0"
#congestion="425,0,240,240,0"
#zip="425,0,200,200,200,1000,200,200,200,1000,200,200,200,5000,4"


## An emergency block defines an emergency phone number.
## Such will disappear in a special menu on the bottom right of the main window. When invoking such an emergency number, all ongoing calls will
## be terminated and the number is being called.

## Each number/block must be "emergency_" followed by a unique number. The numbers are sorted by this index.
# [emergency_0]

## The number to call.
## (mandatory)
# number=112

## The name of the button that calls this number.
## (mandatory)
# displayName=Firefighters / Medical


## An LDAP block defines one LDAP source for the address book.
## Example (all fields are mandatory unless specified as optional):

## Each block must have the name "ldap", followed by one ore more digits.
#[ldap0]

## If set, contacts from this source will be shown separately in the search results, as defined by prio.
## (optional, default: "")
#displayName="My Addressbook"

## If displayName is set, contacts from this source will be sorted in search results with the given priority. A higher value means a higher
## priority. Does nothing if displayName is not set.
## (optional, default: 0)
#prio=50

## The URL of the LDAP service
#url="ldap://ldap.intranet.example.org"

## The LDAP base for the search
#base="dc=example,dc=org"

## The LDAP filter for the search
#filter="(&(objectClass=inetOrgPerson)(!(loginShell=/bin/false)))"

## The method used for LDAP bind
## The possible values are:
## "none": Do not use any LDAP bind. This is useful if the authentication is handled by the os config.
## "simple": LDAP simple bind. In this case a dn must be set. The password will be requested via a GUI dialog and stored encrypted.
## "gssapi": LDAP SASL bind per GSSAPI. Which other options (see below) must be set depends on the server configuration.
##
## default: "none"
## (optional)
#bindMethod="none"

## Whether to use SSL/TLS for the LDAP bind
## (optional, default: false)
# useSSL=false

## The dn used for LDAP simple bind
## This is the dn used for LDAP bind when the property "bindMethod" is set to "simple". It is ignored when "bindMethod" is "none" or not set. 
## When using with a SASL bind mechanism, the bindDn will be used, but the LDAP server will most likely ignore it.
## (required | ignored)
#bindDn="cn=manager, o=university of michigan, c=us"

## A phone number prefix which is stripped from each phone number read from the LDAP source.
## This is useful to strip a company's own number and just take the "internal number".
## Example: Given baseNumber="+492933911", the number "+492933911678" will appear as "678" in the address book.
## (optional)
#baseNumber="+492933911"

## If the SIP environment the client is used in does support subscribing to buddy states (i.e. if a contact is available, busy, etc.), the phone number
## found for this LDAP attribute will be used for that subscription.
## This is a performance optimization: when numbers saved under a specific attribute can and will never be subscriptable for SIP states (e.g. "mobile"), 
## the client does not need to try. While not an excessive overhead, it might affect performance on slow systems and a large number of subscriptions.
## Multiple values must be comma-seperated, e.g. "telephoneNumber,mobile"
## (optional)
#sipStatusSubscriptableAttributes="telephoneNumber"

## Realm as it might be required for SASL LDAP bind
## default: ""
## (optional)
#realm="myldap.org"

## Authcid as it might be required for SASL LDAP bind
## default: ""
## (optional)
#authcid="foo@myldap.org"

## Authzid as it might be required for SASL LDAP bind
## default: ""
## (optional)
#authzid="bar@myldap.org"


## A CardDAV block defines a CardDAV source for the address book.
## The password for the authentication will be requested in a UI dialog on next start of the app. It will then be saved encrypted for further usage in
## the config file named "keychain". Delete the appropriate part there to enforce a new password request.
## The contacts will be loaded asynchronously on app start. Depending on quantity and server speed, it might take a few minutes until all contacts
## are loaded.
## Example (all fields are mandatory unless specified as optional):

## Each block (= CardDAV source) must have the name "carddav", followed by one or more digits.
# [carddav0]

## If set, contacts from this source will be shown separately in the search results, as defined by prio.
## (optional, default: "")
#displayName="My Addressbook"

## If displayName is set, contacts from this source will be sorted in search results with the given priority. A higher value means a higher
## priority. Does nothing if displayName is not set.
## (optional, default: 0)
#prio=50

## The host is the main host address of the remote server, without any port, protocol or path data.
# host=cloud.mycompany.com

## The path relative to the host where to find the resource.
# path=/remote.php/dav/addressbooks/users/john/contacts/

## The user name required for the authentication.
# user=john

## The server port.
## (optional, defaults: 443 is used if useSSL is true, 80 if false)
# port=443

## Whether to use SSL (https) or not (http).
## (optional, default: false)
# useSSL=false

## Path to a CA certificate to use when useSSL is enabled.
## (optional)
# caFile=/home/user123/.cert/my_ca.crt

## Whether a button to upgrade to a Jitsi Meet session should be displayed, if the counterpart is also a GOnnect client.
# [jitsi]
# # The base URL to initiate Jitsi Meet session on

## The base URL to initiate Jitsi Meet session on
## (mandatory)
# url=https://meet.example.com

## The name to display in the Jitsi Meet session
## (mandatory)
# displayName=""

## Whether to show the Jitsi pre-join screen
## (optional, default: false)
# preconfig=false

## How to authorize against the Jitsi Meet server, if necessary.
## possible values:
## "none": do no authorization
## "oidc+jwt": use OIDC provider to retrieve a token, with that retrieve a JWT from another service
## (optional: default: "none")
# authorizationMode=none

## Information for OIDC authorization, if so configured via 'authorizationMode' setting
## (mandatory if 'authorizationMode' includes 'oidc', igonred otherwise)
# clientIdentifier=huwieYahr7teirooshie8eiviaqu8phu
# authorizationUrl=https://id.gonicus.de/realms/GONICUS.DE/protocol/openid-connect/auth
# tokenUrl=https://id.gonicus.de/realms/GONICUS.DE/protocol/openid-connect/token

## URL for the JWT server, if so configured via 'authorizationMode' setting
## (mandatory if 'authorizationMode' includes 'jwt', igonred otherwise)
# baseUrl=https://meet.gonicus.de/auth/token



## An EDS contacts block defines an Evolution Data Server source for the address book.
# [eds-contacts]

## If left unconfigured, the plugin will simply be enabled by default.
## (optional, default: true)
# enabled=true


## An Akonadi contacts block defines an Akonadi source for the address book.
# [akonadi-contacts]

## If left unconfigured, the plugin will simply be enabled by default.
## (optional, default: true)
# enabled=true


## A matrix block defines a Matrix account for chatting.
## It must be "matrix" followed by a unique number for each account.
# [matrix0]

## The matrix id (mxid). The server url is automatically deducted from the id.
## mandatory
# id=@username:homeserver.tld

## The display name of this device.
## Each authenticated matrix client can be administrated by a device id. Set this to recognize the GOnnect client.
## (optional, default: "GOnnect")
# deviceName="My fancy device"


## A CalDAV block defines a CalDAV source for dates.
## The password for the authentication will be requested in a UI dialog on next start of the app. It will then be saved encrypted for further usage in
## the config file named "keychain". Delete the appropriate part there to enforce a new password request.
## The contacts will be loaded asynchronously on app start.
## Example (all fields are mandatory unless specified as optional):

## Each block (= CalDAV source) must have the name "caldav", followed by one or more digits.
# [caldav0]

## The main host address of the remote server, without any port, protocol or path data.
# host="caldav.myserver.org"

## The path relative to the host where to find the resource.
# path="/caldav/schedules"

## The user name required for the authentication.
# user="johndoe_1337"

## The port for the resource.
# port=8443

## Whether to use SSL (https) or not (http).
## (optional, default: true)
# useSSL=true

## Specifies the duration between requests made to the CalDAV server, in milliseconds.
## (optional, default: 300000)
# interval=300000


## An EDS calendar block defines an Evolution Data Server source for dates.
# [eds-calendar]

## If left unconfigured, the plugin will be disabled by default.
## (optional, default: false)
# enabled=false


## An Akonadi calendar block defines an Akonadi source for dates.
# [akonadi-calendar]

## If left unconfigured, the plugin will be disabled by default.
## (optional, default: false)
# enabled=false

## Togglers can be used to change the state of a configuration in your PBX by sending a special sequence.
## The section name starts with "toggler_" postfixed with a number.
# [toggler_0]

## The SIP account to use to send the toggle sequence. Usually "account0"
# account=account0

## The text, which is shown in the UI
# label=Transfer call if no SIP client is connected (CFNC)

## A description of the topggler (currently not used)
# description=

## A sequence to ask the PBX for the current state
# subscribe=*2%CFG[generic/number]%@example.org

## A sequence to send to the PBX to toggle the state
# toggle=*2@example.org

## Where should the toggler be shown?
## menu - The toggler is shown in the hamburger menu
## tray - The toggler is shown as entry in the tray menu
## statusbar - The toggler is shown in the status bar of the main window
## settings-phoning - the toggler is shown on the settings page in the phoning section
# display=statusbar

## Togglers can be used to change the state of a configuration in your PBX by sending a special sequence.
## The section name starts with "toggler_" postfixed with a number.
# [toggler_0]

## The SIP account to use to send the toggle sequence. Usually "account0"
# account=account0

## The text, which is shown in the UI
# label=Transfer call if no SIP client is connected (CFNC)

## A description of the topggler (currently not used)
# description=

## A SIP-URI to subscribe for the toggler state
# subscribe=sip:*2%CFG[generic/number]%@example.org

## A SIP-URI to dial to toggle the state
# toggle=sip:*2@example.org

## Where should the toggler be shown?
## menu - The toggler is shown in the hamburger menu
## tray - The toggler is shown as entry in the tray menu
## statusbar - The toggler is shown in the status bar of the main window
## settings-phoning - the toggler is shown on the settings page in the phoning section
# display=statusbar
